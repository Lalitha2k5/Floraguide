# Function to handle start command
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('Welcome to the FloraGUIDE Bot! Send me the name of a flower to get started or you can get the list of flowers using /flowers command.')

# Function to provide list of flowers
async def list_flowers(update: Update, context: CallbackContext) -> None:
    flowers = "\n".join(f"• {flower}" for flower in flower_data.keys())
    await update.message.reply_text(f"Here are the flowers I know about:\n{flowers}")

# Function to handle messages
async def handle_message(update: Update, context: CallbackContext) -> None:
    flower_name = update.message.text.strip().capitalize()
    flower_names = list(flower_data.keys())
    closest_match, score, _ = process.extractOne(flower_name, flower_names)

    if score >= 70:  # Threshold for matching accuracy
        flower_info = flower_data[closest_match]
        response = (
            f"**{closest_match}**\n"
            f"• **Scientific Name:** {flower_info['scientific_name']}\n"
            f"• **Properties:** {flower_info['properties']}\n"
            f"• **Uses:** {flower_info['uses']}\n"
            f"• **Colors:** {', '.join(flower_info['colors'])}\n"
            f"• **Fragrance:** {flower_info['fragrance']}\n"
            f"• **Season:** {flower_info['season']}"
        )
        await update.message.reply_text(response, parse_mode='Markdown')
    else:
        await update.message.reply_text("Sorry, I don't have information about that flower. Please try another one.")

def main() -> None:
    # Replace 'YOUR_TOKEN' with your actual bot token
    application = Application.builder().token("7275269010:AAE9_AxKe9fhSXf-0BKxcVkd7i977WFZDZk").build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("flowers", list_flowers))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Start the bot
    application.run_polling()

if __name__ == '__main__':
    main()
